<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\HT52352_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\HT52352_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Thu May 02 17:01:54 2019
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BackTask &rArr; Task_GetPicture &rArr; bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM0_IRQHandler</a> from bsp_bftm.o(i.BFTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from bsp_exti.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.UART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">USART0_IRQHandler</a> from ht32f5xxxx_01_it.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.USART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[27]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[28]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced from malloc.o(.data)
 <LI><a href="#[29]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[15]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2f]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[18]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[31]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[46]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_perused
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[dc]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[de]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[5a]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[14]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_bftm.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>BFTM_EnaCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
</UL>

<P><STRONG><a name="[4c]"></a>BFTM_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
</UL>

<P><STRONG><a name="[4a]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
</UL>

<P><STRONG><a name="[4b]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
</UL>

<P><STRONG><a name="[48]"></a>BF_TIM_int</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_bftm.o(i.BF_TIM_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BF_TIM_int &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[4e]"></a>BackTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.BackTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = BackTask &rArr; Task_GetPicture &rArr; bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[51]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[53]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[49]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[54]"></a>Delay_10us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_systick.o(i.Delay_10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bsp_exti.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTIX_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bsp_exti.o(i.EXTIX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTIX_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[58]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>EXTI_GetEdgeStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>EXTI_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[60]"></a>EXTI_IntConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[75]"></a>GPIO_OpenDrainConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_OpenDrainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[5b]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ReadInBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_ReadInData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[81]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
</UL>

<P><STRONG><a name="[57]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetPicture
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>MSD0_GetCardInfo</STRONG> (Thumb, 804 bytes, Stack size 48 bytes, spi_msd0_driver.o(i.MSD0_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MSD0_GetCardInfo &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[64]"></a>MSD0_Init</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, spi_msd0_driver.o(i.MSD0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSD0_Init &rArr; MSD0_SPIHighSpeed &rArr; SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command_hold
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_SPIHighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[68]"></a>MSD0_ReadMultiBlock</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, spi_msd0_driver.o(i.MSD0_ReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSD0_ReadMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[69]"></a>MSD0_ReadSingleBlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_msd0_driver.o(i.MSD0_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSD0_ReadSingleBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[67]"></a>MSD0_SPIHighSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_msd0_driver.o(i.MSD0_SPIHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSD0_SPIHighSpeed &rArr; SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
</UL>

<P><STRONG><a name="[6b]"></a>MSD0_SPI_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spi_msd0_driver.o(i.MSD0_SPI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MSD0_SPI_Configuration &rArr; SPI1_Gpio_Init &rArr; MSD0_SPIHighSpeed &rArr; SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[6d]"></a>MSD0_WriteMultiBlock</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, spi_msd0_driver.o(i.MSD0_WriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[6e]"></a>MSD0_WriteSingleBlock</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, spi_msd0_driver.o(i.MSD0_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSD0_WriteSingleBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[63]"></a>MSD0_read_buffer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, spi_msd0_driver.o(i.MSD0_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSD0_read_buffer &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadSingleBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadMultiBlock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_GetCardInfo
</UL>

<P><STRONG><a name="[62]"></a>MSD0_send_command</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, spi_msd0_driver.o(i.MSD0_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteSingleBlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteMultiBlock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadSingleBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadMultiBlock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_GetCardInfo
</UL>

<P><STRONG><a name="[66]"></a>MSD0_send_command_hold</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, spi_msd0_driver.o(i.MSD0_send_command_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSD0_send_command_hold &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_Init
</UL>

<P><STRONG><a name="[65]"></a>MSD0_spi_read_write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_msd0_driver.o(i.MSD0_spi_read_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command_hold
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_send_command
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_read_buffer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteSingleBlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteMultiBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadMultiBlock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OV7725_Brightness</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ov7725.o(i.OV7725_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OV7725_Brightness &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[72]"></a>OV7725_Color_Saturation</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Color_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Color_Saturation &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[73]"></a>OV7725_Contrast</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Contrast &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[74]"></a>OV7725_Init</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, ov7725.o(i.OV7725_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OV7725_Init &rArr; SCCB_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[78]"></a>OV7725_Light_Mode</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Light_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Light_Mode &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[79]"></a>OV7725_Special_Effects</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, ov7725.o(i.OV7725_Special_Effects))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OV7725_Special_Effects &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[7a]"></a>OV7725_Window_Set</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, ov7725.o(i.OV7725_Window_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OV7725_Window_Set &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SCCB_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCCB_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[7b]"></a>SCCB_No_Ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sccb.o(i.SCCB_No_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_No_Ack &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[7c]"></a>SCCB_RD_Byte</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sccb.o(i.SCCB_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCCB_RD_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[77]"></a>SCCB_RD_Reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sccb.o(i.SCCB_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCCB_RD_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[7e]"></a>SCCB_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_Start &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[80]"></a>SCCB_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sccb.o(i.SCCB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_Stop &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[7f]"></a>SCCB_WR_Byte</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[71]"></a>SCCB_WR_Reg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effects
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Contrast
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
</UL>

<P><STRONG><a name="[6c]"></a>SPI1_Gpio_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_spi.o(i.SPI1_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI1_Gpio_Init &rArr; MSD0_SPIHighSpeed &rArr; SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_SPIHighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_SPI_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>SPI1_Init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, bsp_spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_SPIHighSpeed
</UL>

<P><STRONG><a name="[6f]"></a>SPI1_ReadWrite</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_spi.o(i.SPI1_ReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_spi_read_write
</UL>

<P><STRONG><a name="[82]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Gpio_Init
</UL>

<P><STRONG><a name="[85]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f5xxxx_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[83]"></a>SPI_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ht32f5xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[87]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[84]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[86]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[55]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>

<P><STRONG><a name="[90]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[8f]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[88]"></a>SysInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, system.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SysInit &rArr; USART1_Init &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effects
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Contrast
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Color_Saturation
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_SPI_Configuration
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BF_TIM_int
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SysTick_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TimingDelay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_systick.o(i.TimingDelay))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>USART1_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bsp_uart.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART1_Init &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[95]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>USART_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[96]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>USART_TxRxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_TxRxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[9a]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
</UL>

<P><STRONG><a name="[e6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[44]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[52]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht32f5xxxx_ckcu.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Special_Effects
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Light_Mode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Brightness
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[93]"></a>bmp_encode</STRONG> (Thumb, 630 bytes, Stack size 136 bytes, bmp.o(i.bmp_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetPicture
</UL>

<P><STRONG><a name="[92]"></a>camera_new_pathname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmp.o(i.camera_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = camera_new_pathname &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetPicture
</UL>

<P><STRONG><a name="[be]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[ae]"></a>disk_initialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_initialize &rArr; MSD0_Init &rArr; MSD0_SPIHighSpeed &rArr; SPI1_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[c3]"></a>disk_ioctl</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_ioctl &rArr; MSD0_GetCardInfo &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_GetCardInfo
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[ab]"></a>disk_read</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_read &rArr; MSD0_ReadMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadSingleBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_ReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[ad]"></a>disk_status</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[c4]"></a>disk_write</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteSingleBlock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD0_WriteMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[8c]"></a>exfuns_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, exfuns.o(i.exfuns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = exfuns_init &rArr; mymalloc &rArr; my_mem_malloc &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a8]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[8b]"></a>f_mount</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a5]"></a>f_open</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[c5]"></a>f_sync</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[a6]"></a>f_write</STRONG> (Thumb, 558 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[b5]"></a>ff_convert</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[b0]"></a>ff_wtoupper</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[c1]"></a>gen_numname</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[b2]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[c7]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = main &rArr; BackTask &rArr; Task_GetPicture &rArr; bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cb]"></a>my_mem_free</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = my_mem_free &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[28]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>my_mem_malloc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = my_mem_malloc &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[29]"></a>my_mem_perused</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = my_mem_perused &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>myfree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = myfree &rArr; my_mem_free &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
</UL>

<P><STRONG><a name="[91]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mymalloc &rArr; my_mem_malloc &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GetPicture
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>

<P><STRONG><a name="[a2]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[a0]"></a>pic_memalloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, piclib.o(i.pic_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pic_memalloc &rArr; mymalloc &rArr; my_mem_malloc &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[a1]"></a>pic_memfree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, piclib.o(i.pic_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pic_memfree &rArr; myfree &rArr; my_mem_free &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[b3]"></a>put_fat</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>Task_GetPicture</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, system.o(i.Task_GetPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Task_GetPicture &rArr; bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackTask
</UL>

<P><STRONG><a name="[23]"></a>BootProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>check_fs</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; disk_read &rArr; MSD0_ReadMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[b6]"></a>chk_chr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[ac]"></a>chk_mounted</STRONG> (Thumb, 1040 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; MSD0_ReadMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[af]"></a>cmp_lfn</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[b1]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[b4]"></a>create_name</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[b8]"></a>dir_find</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[bd]"></a>dir_next</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[bf]"></a>dir_register</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b9]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c2]"></a>fit_lfn</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[c6]"></a>follow_path</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[bc]"></a>mem_cmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c0]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[b7]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[ba]"></a>move_window</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[c8]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[bb]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[ca]"></a>sync</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; MSD0_WriteMultiBlock &rArr; MSD0_send_command &rArr; MSD0_spi_read_write &rArr; SPI1_ReadWrite &rArr; SPI_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[c9]"></a>validate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[9c]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[9f]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
